module manual_test (
    input clk,
    input rst,
    input in[16],
    input switch[2],
    input alufn[6],
    output out[16]
  ) {
  
  alu alu16;
  
  .clk(clk), .rst(rst) {
  
    fsm test = {INPUTA, INPUTB, OUTPUT};
    dff inputa[16];  //save input a
    dff inputb[16];  //save input b
    
    }
  
  always {
  
    //setup
    out = b0;
    alu16.a = b0;
    alu16.b = b0;
    alu16.alufn = alufn;
    
    //fsm
    case(test.q) {
    
      test.INPUTA:  // function: enter 16bit number in 'in' and flip switch[1] to 1 to save it as inputa
        
        if (switch[1]) {  // if switch[1] == 1, read manually inputted 'in' to inputa and go to state INPUTB next
          inputa.d = in;
          test.d = test.INPUTB;
        } else {  // while switch[1] == 0 stay at state INPUTA
          test.d = test.INPUTA;
        }
        
      test.INPUTB:  // function: enter 16bit number in 'in' and flip switch[0] to 1 to save it as inputb
      
        if (switch[0]) {  // if switch[0] == 1, read manually inputted 'in' to inputb and go to state OUTPUT next
          inputb.d = in;
          test.d = test.OUTPUT;
        } else {  // while switch[0] == 0 stay at state INPUTB
          test.d = test.INPUTB;
        }
      
      test.OUTPUT:  // funtion: performs computations on inputa and inputb using alu16 and sets the output to 'out'. Stays at state OUTPUT (Halt).
      
        alu16.a = inputa.q;
        alu16.b = inputb.q;
        out = alu16.out;
        test.d = test.OUTPUT;
        
  }
}
